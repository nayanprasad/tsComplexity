import { CodeRunner } from './runner';
import { AlgorithmSpeed, AnalysisResult, BigO, Code, Language } from './structures';
import { ArgumentGeneratingFunction, CodeTransformerFunction } from './creator';
import { Calculator } from './calculator';
export declare type AnalysisServiceConfig = {
    optimalComplexities?: Map<string, BigO>;
    calculators?: Map<Language, Calculator>;
    repeatedSamples?: Map<Language, number[]>;
    defaultCalculator?: Calculator;
};
declare class AnalysisService {
    private optimalComplexities;
    private calculators;
    private repeatedSamples;
    private defaultCalculator;
    private codeRunner;
    private testSetCreator;
    constructor(codeRunner: CodeRunner, config?: AnalysisServiceConfig);
    analyze(code: Code, runnerContext?: {
        [key: string]: string;
    }): Promise<AnalysisResult>;
    private recursiveAnalyze;
    private runSample;
    addTestSetCreatorDefaultLanguageSet(language: Language, sampleSizes: number[]): void;
    addTestSetCreatorSpeedLanguageSet(language: Language, speed: AlgorithmSpeed, sampleSizes: number[]): void;
    useBuiltInGenerator(testedFunctionName: string, builtInGeneratorName: string): void;
    addCustomGenerator(testedFunctionName: string, func: ArgumentGeneratingFunction): void;
    addLanguageCodeTransformer(language: Language, transformer: CodeTransformerFunction): void;
    addLanguageReplacePattern(language: Language, pattern: string | RegExp): void;
    private runCountForSample;
    private optimalComplexity;
    private calculatorForLanguage;
}
export { AnalysisService };
