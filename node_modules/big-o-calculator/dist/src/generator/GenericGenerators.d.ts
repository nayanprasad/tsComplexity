declare abstract class CharacterSet {
    static ALNUM: string;
    static ALPHA: string;
    static NUM: string;
}
declare function generateConsecutiveNumbers(n: number, start?: number): number[];
declare function generateNumberArray(n: number, range?: number[]): number[];
declare function generateNumber(min: number, max: number): number;
declare function generateNumberString(n: number): string;
declare function generateStringArray(n: number, stringLength: number, set: string | Array<string | number>, range?: boolean): string[];
declare function generateString(n: number, characterSet: string | Array<string | number>): string;
declare function generateSuperIncreasing(n: number): number[];
declare function generateTreeConstructorArguments(n: number): string[];
declare function generateRandomTime(): string;
declare function generatePalindrome(n: number): string;
declare function generateFibonacci(n: number): number;
declare function generateNthLetterIndex(n: number): string;
declare function generatePascalsTriangleNthRow(n: number): number[];
export { CharacterSet, generateTreeConstructorArguments, generateSuperIncreasing, generateString, generateStringArray, generateNumberString, generateNumberArray, generateConsecutiveNumbers, generateRandomTime, generatePalindrome, generateFibonacci, generateNthLetterIndex, generatePascalsTriangleNthRow, generateNumber, };
