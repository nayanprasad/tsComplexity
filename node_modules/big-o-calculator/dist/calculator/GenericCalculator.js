"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericCalculator = exports.TIMEOUT_THRESHOLD_MS = void 0;
const structures_1 = require("../structures");
const generator_1 = require("../creator/generator");
exports.TIMEOUT_THRESHOLD_MS = 20000;
class GenericCalculator {
    calculate(runTimes, speed) {
        const nGroupedRunTimes = this.groupRunTimes(runTimes);
        switch (true) {
            case this.likeFactorial(nGroupedRunTimes, speed):
                return structures_1.BigO.FACTORIAL;
            case this.likeExponential(nGroupedRunTimes, speed):
                return structures_1.BigO.EXPONENTIAL;
            case this.likePolynomial(nGroupedRunTimes, speed):
                return structures_1.BigO.POLYNOMIAL;
            case this.likeQuadratic(nGroupedRunTimes, speed):
                return structures_1.BigO.QUADRATIC;
            case this.likeLoglinear(nGroupedRunTimes, speed):
                return structures_1.BigO.LOGLINEAR;
            default:
                return structures_1.BigO.UNKNOWN;
        }
    }
    groupRunTimes(runTimes) {
        const tempNGrouped = {};
        const keys = [];
        const nGroupedRunTimes = {};
        for (let i = 0; i < runTimes.length; i++) {
            const sampleSize = runTimes[i].n;
            if (!tempNGrouped.hasOwnProperty(sampleSize)) {
                keys.push(sampleSize);
                tempNGrouped[sampleSize] = [];
            }
            tempNGrouped[sampleSize].push(runTimes[i].result);
        }
        for (let i = 0; i < keys.length; i++) {
            if (tempNGrouped[keys[i]].length == 1) {
                nGroupedRunTimes[keys[i]] = tempNGrouped[keys[i]][0];
                continue;
            }
            const sum = tempNGrouped[keys[i]].reduce((accumulator, currentValue) => accumulator + currentValue);
            nGroupedRunTimes[keys[i]] = Math.round(sum / tempNGrouped[keys[i]].length);
        }
        return nGroupedRunTimes;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    likeLoglinear(nGroupedRunTimes, speed) {
        return nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n1M)
            && nGroupedRunTimes[generator_1.SampleSize.n1M] >= 1000;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    likeQuadratic(nGroupedRunTimes, speed) {
        return nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n1K)
            && nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n2K)
            && nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n4K)
            && nGroupedRunTimes[generator_1.SampleSize.n1K] * 3 < nGroupedRunTimes[generator_1.SampleSize.n2K]
            && nGroupedRunTimes[generator_1.SampleSize.n2K] * 3 < nGroupedRunTimes[generator_1.SampleSize.n4K];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    likePolynomial(nGroupedRunTimes, speed) {
        return nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n128)
            && nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n256)
            && nGroupedRunTimes[generator_1.SampleSize.n128] * 4 < nGroupedRunTimes[generator_1.SampleSize.n256];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    likeExponential(nGroupedRunTimes, speed) {
        return nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n32)
            && nGroupedRunTimes[generator_1.SampleSize.n32] >= exports.TIMEOUT_THRESHOLD_MS;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    likeFactorial(nGroupedRunTimes, speed) {
        return nGroupedRunTimes.hasOwnProperty(generator_1.SampleSize.n16)
            && nGroupedRunTimes[generator_1.SampleSize.n16] >= exports.TIMEOUT_THRESHOLD_MS;
    }
}
exports.GenericCalculator = GenericCalculator;
//# sourceMappingURL=GenericCalculator.js.map