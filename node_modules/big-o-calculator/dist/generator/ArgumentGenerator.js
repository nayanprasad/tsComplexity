"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuiltInArgumentTypes = exports.ArgumentGenerator = void 0;
const GenericGenerators_1 = require("./GenericGenerators");
class BuiltInArgumentTypes {
}
exports.BuiltInArgumentTypes = BuiltInArgumentTypes;
BuiltInArgumentTypes.WORDS = 'words';
BuiltInArgumentTypes.ALPHA_STRING = 'string';
BuiltInArgumentTypes.NUMBER_STRING = 'numberString';
BuiltInArgumentTypes.NUMBER = 'number';
BuiltInArgumentTypes.RANDOM_NUMBERS = 'numberArr';
BuiltInArgumentTypes.ORDERED_NUMBERS = 'consecutiveNumberArr';
class ArgumentGenerator {
    constructor() {
        this.generators = {
            [BuiltInArgumentTypes.WORDS]: n => GenericGenerators_1.generateStringArray(n, 10, GenericGenerators_1.CharacterSet.ALPHA, true).join(' '),
            [BuiltInArgumentTypes.ALPHA_STRING]: n => GenericGenerators_1.generateString(n, GenericGenerators_1.CharacterSet.ALPHA),
            [BuiltInArgumentTypes.NUMBER_STRING]: n => GenericGenerators_1.generateString(n, GenericGenerators_1.CharacterSet.NUM),
            [BuiltInArgumentTypes.NUMBER]: n => n,
            [BuiltInArgumentTypes.RANDOM_NUMBERS]: n => GenericGenerators_1.generateNumberArray(n, [1, n]),
            [BuiltInArgumentTypes.ORDERED_NUMBERS]: n => GenericGenerators_1.generateConsecutiveNumbers(n),
        };
    }
    isArgumentTypeSupported(argumentType) {
        return this.generators.hasOwnProperty(argumentType);
    }
    generateSet(ns, testedFunctionName) {
        return ns.map(n => this.generate(n, testedFunctionName));
    }
    generate(n, testedFunctionName) {
        if (!this.isArgumentTypeSupported(testedFunctionName)) {
            throw new Error(`No generator for ${testedFunctionName}!`);
        }
        let generator = this.generators[testedFunctionName];
        return {
            n,
            value: generator(n)
        };
    }
    useBuiltInGenerator(testedFunctionName, builtInGeneratorName) {
        if (!this.isArgumentTypeSupported(builtInGeneratorName)) {
            throw new Error(`No generator found for ${builtInGeneratorName}!`);
        }
        this.generators[testedFunctionName] = this.generators[builtInGeneratorName];
    }
    addCustomGenerator(testedFunctionName, func) {
        if (this.isArgumentTypeSupported(testedFunctionName)) {
            throw new Error(`Argument generator for ${testedFunctionName} already exists!`);
        }
        this.generators[testedFunctionName] = func;
    }
}
exports.ArgumentGenerator = ArgumentGenerator;
//# sourceMappingURL=ArgumentGenerator.js.map