"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateNumber = exports.generatePascalsTriangleNthRow = exports.generateNthLetterIndex = exports.generateFibonacci = exports.generatePalindrome = exports.generateRandomTime = exports.generateConsecutiveNumbers = exports.generateNumberArray = exports.generateNumberString = exports.generateStringArray = exports.generateString = exports.generateSuperIncreasing = exports.generateTreeConstructorArguments = exports.CharacterSet = void 0;
class CharacterSet {
}
exports.CharacterSet = CharacterSet;
CharacterSet.ALNUM = 'abcdefghijklmnopqrstuvwxyz0123456789';
CharacterSet.ALPHA = 'abcdefghijklmnopqrstuvwxyz';
CharacterSet.NUM = '0123456789';
function generateConsecutiveNumbers(n, start = 1) {
    const args = [];
    for (let i = start; i < (n + start); i++) {
        args.push(i);
    }
    return args;
}
exports.generateConsecutiveNumbers = generateConsecutiveNumbers;
function generateNumberArray(n, range = []) {
    let generator = function (n) {
        return n;
    };
    if (range[0] !== undefined && range[1] !== undefined) {
        generator = function () {
            const max = range[1] - range[0];
            return Math.round(Math.random() * max) + range[0];
        };
    }
    const args = [];
    for (let i = 1; i <= n; i++) {
        args.push(generator(i));
    }
    return args;
}
exports.generateNumberArray = generateNumberArray;
function generateNumber(min, max) {
    const multiplier = max - min;
    return Math.round(Math.random() * multiplier) + min;
}
exports.generateNumber = generateNumber;
function generateNumberString(n) {
    return generateString(n, CharacterSet.NUM);
}
exports.generateNumberString = generateNumberString;
function generateStringArray(n, stringLength, set, range = false) {
    const arr = [];
    let currLen = stringLength;
    for (let i = 0; i < n; i++) {
        if (range) {
            currLen = Math.ceil(Math.random() * stringLength);
        }
        const curr = generateString(currLen, set);
        arr.push(curr);
    }
    return arr;
}
exports.generateStringArray = generateStringArray;
function generateString(n, characterSet) {
    if (!Array.isArray(characterSet)) {
        characterSet = characterSet.split('');
    }
    const limit = characterSet.length - 1;
    let result = '';
    for (let i = 1; i <= n; i++) {
        const key = Math.round(Math.random() * limit);
        result += characterSet[key];
    }
    return result;
}
exports.generateString = generateString;
function generateSuperIncreasing(n) {
    let sum = 0;
    const arr = [];
    for (let i = 1; i <= n; i++) {
        sum += i;
        arr.push(sum);
    }
    return arr;
}
exports.generateSuperIncreasing = generateSuperIncreasing;
function generateTreeConstructorArguments(n) {
    const args = [];
    for (let i = 1; i < n; i++) {
        const pair = '(' + (i + 1) + ',' + i + ')';
        args.push(pair);
    }
    return args;
}
exports.generateTreeConstructorArguments = generateTreeConstructorArguments;
function generateRandomTime() {
    const ts = Math.floor(Math.random() * (1000 * 60 * 60 * 24));
    const localString = new Date(ts).toLocaleTimeString('en-US');
    const len = localString.length;
    const timeOfDay = localString.substring(len - 2).toLowerCase();
    const parts = localString.split(':');
    return parts[0] + ':' + parts[1] + timeOfDay;
}
exports.generateRandomTime = generateRandomTime;
function generatePalindrome(n) {
    const odd = n % 2 !== 0;
    const half = Math.round(n / 2);
    const part = generateString(half, CharacterSet.ALPHA);
    let palindrome = part;
    if (odd) {
        palindrome += 'a';
    }
    palindrome += part.split('').reverse().join('');
    return palindrome;
}
exports.generatePalindrome = generatePalindrome;
// https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/
// Method 7
function generateFibonacci(n) {
    const phi = (1 + Math.sqrt(5)) / 2;
    return Math.round(Math.pow(phi, n) / Math.sqrt(5));
}
exports.generateFibonacci = generateFibonacci;
function generateNthLetterIndex(n) {
    const i = n - 1;
    const letterPosition = i % 26;
    const letterCount = Math.floor(i / 26 + 1);
    return generateString(letterCount, CharacterSet.ALNUM[letterPosition]).toUpperCase();
}
exports.generateNthLetterIndex = generateNthLetterIndex;
//https://www.geeksforgeeks.org/find-the-nth-row-in-pascals-triangle/
function generatePascalsTriangleNthRow(n) {
    const row = [1];
    for (let i = 1; i <= n; i++) {
        const curr = (row[i - 1] * (n - i + 1)) / i;
        row.push(curr);
    }
    return row;
}
exports.generatePascalsTriangleNthRow = generatePascalsTriangleNthRow;
//# sourceMappingURL=GenericGenerators.js.map