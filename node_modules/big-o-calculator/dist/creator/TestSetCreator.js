"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSetCreator = void 0;
const generator_1 = require("./generator");
const transformer_1 = require("./transformer");
class TestSetCreator {
    constructor() {
        this.languageSampleSizesBySpeed = new Map();
        this.languageDefaultSampleSizes = new Map();
        this.argumentGenerator = new generator_1.ArgumentGenerator();
        this.codeTransformer = new transformer_1.CodeTransformer();
    }
    addDefaultLanguageSet(language, sampleSizes) {
        this.languageDefaultSampleSizes.set(language, sampleSizes);
    }
    addSpeedLanguageSet(language, speed, sampleSizes) {
        var _a;
        if (!this.languageSampleSizesBySpeed.has(language)) {
            this.languageSampleSizesBySpeed.set(language, new Map());
        }
        (_a = this.languageSampleSizesBySpeed.get(language)) === null || _a === void 0 ? void 0 : _a.set(speed, sampleSizes);
    }
    create(code) {
        const ns = this.sampleSizes(code.language, code.expectedSpeed);
        const testSamples = this.argumentGenerator.generateSet(ns, code.testedFunctionName);
        return {
            code,
            samples: this.codeTransformer.injectFunctionArguments(code, testSamples),
        };
    }
    useBuiltInGenerator(testedFunctionName, builtInGeneratorName) {
        this.argumentGenerator.useBuiltInGenerator(testedFunctionName, builtInGeneratorName);
    }
    addCustomGenerator(testedFunctionName, func) {
        this.argumentGenerator.addCustomGenerator(testedFunctionName, func);
    }
    addLanguageCodeTransformer(language, transformer) {
        this.codeTransformer.addLanguageCodeTransformer(language, transformer);
    }
    addLanguageReplacePattern(language, pattern) {
        this.codeTransformer.addLanguageReplacePattern(language, pattern);
    }
    sampleSizes(language, speed) {
        var _a, _b;
        if (this.languageSampleSizesBySpeed.has(language) && ((_a = this.languageSampleSizesBySpeed.get(language)) === null || _a === void 0 ? void 0 : _a.has(speed))) {
            return (_b = this.languageSampleSizesBySpeed.get(language)) === null || _b === void 0 ? void 0 : _b.get(speed);
        }
        if (this.languageDefaultSampleSizes.has(language)) {
            return this.languageDefaultSampleSizes.get(language);
        }
        return TestSetCreator.DEFAULT_SAMPLES;
    }
}
exports.TestSetCreator = TestSetCreator;
TestSetCreator.DEFAULT_SAMPLES = [
    generator_1.SampleSize.n16,
    generator_1.SampleSize.n32,
    generator_1.SampleSize.n128,
    generator_1.SampleSize.n256,
    generator_1.SampleSize.n512,
    generator_1.SampleSize.n1K,
    generator_1.SampleSize.n2K,
    generator_1.SampleSize.n4K,
];
//# sourceMappingURL=TestSetCreator.js.map