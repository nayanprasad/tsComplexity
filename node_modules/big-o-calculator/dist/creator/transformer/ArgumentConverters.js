"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertArray = exports.convertString = void 0;
const structures_1 = require("../../structures");
function convertString(argument) {
    return '"' + argument + '"';
}
exports.convertString = convertString;
function convertArray(argument, language) {
    const arrayMemberType = typeof argument[0];
    if (arrayMemberType === 'string') {
        argument = argument.map(value => convertString(value));
    }
    let arrayArgument;
    switch (language) {
        case structures_1.Language.KOTLIN:
            arrayArgument = 'arrayOf(' + argument.join(',') + ')';
            break;
        case structures_1.Language.SCALA:
            arrayArgument = 'Array(' + argument.join(',') + ')';
            break;
        case structures_1.Language.C:
        case structures_1.Language.CPP:
            arrayArgument = '{' + argument.join(',') + '}';
            break;
        case structures_1.Language.CLOJURE:
            arrayArgument = '(into-array [' + argument.join(',') + '])';
            break;
        case structures_1.Language.JAVA:
            if (arrayMemberType === 'number') {
                arrayArgument = 'new int[] {' + argument.join(',') + '}';
            }
            else {
                arrayArgument = 'new String[] {' + argument.join(',') + '}';
            }
            break;
        case structures_1.Language.GO:
            if (arrayMemberType === 'number') {
                arrayArgument = '[]int {' + argument.join(',') + '}';
            }
            else {
                arrayArgument = '[]string {' + argument.join(',') + '}';
            }
            break;
        case structures_1.Language.CSHARP:
            if (arrayMemberType === 'number') {
                arrayArgument = 'new int[] {' + argument.join(',') + '}';
            }
            else {
                arrayArgument = 'new string[] {' + argument.join(',') + '}';
            }
            break;
        default:
            arrayArgument = '[' + argument.join(',') + ']';
    }
    return arrayArgument;
}
exports.convertArray = convertArray;
//# sourceMappingURL=ArgumentConverters.js.map