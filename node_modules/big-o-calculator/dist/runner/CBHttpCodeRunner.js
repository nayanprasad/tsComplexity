"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CBHttpCodeRunner = void 0;
const structures_1 = require("../structures");
const CodeRunnerError_1 = require("./CodeRunnerError");
const LanguageExtensions_1 = require("./LanguageExtensions");
const TIMEOUT_ERROR_MESSAGE = 'process killed as timeout reached';
class CBHttpCodeRunner {
    constructor(uri, client) {
        this.languageUris = {};
        this.uriPattern = uri;
        this.client = client;
        this.languageResponseHandlers = new Map();
    }
    addResponseHandler(language, handler) {
        this.languageResponseHandlers.set(language, handler);
    }
    checkCodeExecDuration(language, code, context = {}) {
        const uri = this.determineRunnerUri(language);
        const body = this.createCodeSampleBody(language, code, context);
        return this.client.post(uri, body)
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .then((data) => {
            if (data.stderr !== '' || (data.error !== '' && data.error !== TIMEOUT_ERROR_MESSAGE)) {
                const err = new CodeRunnerError_1.CodeRunnerError('Failed at coderunner');
                err.codeRunnerResponse = data;
                return Promise.reject(err);
            }
            if (this.languageResponseHandlers.has(language)) {
                try {
                    const handler = this.languageResponseHandlers.get(language);
                    const duration = handler(data.stdout);
                    return Promise.resolve(duration);
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
            return Promise.resolve(parseInt(data.duration));
        });
    }
    determineRunnerUri(language) {
        if (!this.languageUris.hasOwnProperty(language)) {
            this.languageUris[language] = this.uriPattern.replace(CBHttpCodeRunner.URI_PATTERN_LANG_PART, language);
        }
        return this.languageUris[language];
    }
    createCodeSampleBody(language, code, context = {}) {
        if (language === structures_1.Language.PYTHON3) {
            language = structures_1.Language.PYTHON;
        }
        let filename = 'main';
        if (language === structures_1.Language.JAVA) {
            filename = 'Main';
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const sample = {
            language,
            files: [
                {
                    name: filename + '.' + LanguageExtensions_1.LanguageExtensions[language],
                    content: code
                }
            ]
        };
        Object.keys(context).forEach((key) => {
            sample[key] = context[key];
        });
        return JSON.stringify(sample);
    }
}
exports.CBHttpCodeRunner = CBHttpCodeRunner;
CBHttpCodeRunner.URI_PATTERN_LANG_PART = '[runnerLanguage]';
//# sourceMappingURL=CBHttpCodeRunner.js.map